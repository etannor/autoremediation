{"version":3,"sources":["index.js"],"names":["pc","insertBandwidthLimit","sdpLines","index","limit","search","AUDIO","StaticConfig","meetings","bandwidth","audio","video","splice","SDP","B_LINE","setMaxFs","sdp","level","QUALITY_LEVELS","HIGH","MAX_FRAMESIZES","ParameterError","replaceSdp","maxFsLine","MAX_FS","replace","checkH264Support","videoPresent","match","h264Present","validateSdp","parsedSdp","sdpTransform","parse","media","forEach","mediaLine","candidates","length","LoggerProxy","logger","error","BAD_MEDIA_PORTS","includes","port","icePwd","iceUfrag","limitBandwidth","offerSdp","split","CARRIAGE_RETURN","i","M_LINE","join","iceFailListener","peerConnection","fn","name","oniceconnectionstatechange","iceConnectionState","ICE_STATE","FAILED","DISCONNECTED","warn","Date","setTimeout","ICE_FAIL_TIMEOUT","detectFailures","reconnectFn","MEDIA_PEER_CONNECTION_NAME","setContentSlides","screenPc","A_CONTENT_SLIDES","iceCandidate","remoteQualityLevel","resolve","timeout","localDescription","RETRY_TIMEOUT","ICE_TIMEOUT","onicecandidate","evt","candidate","clearTimeout","replaceTrack","track","senders","getSenders","sender","kind","err","addStream","stream","bowser","msedge","tracksPresent","find","getTracks","addTrack","setRemoteSessionDetails","typeStr","remoteSdp","meetingId","log","signalingState","Metrics","postEvent","event","eventType","REMOTE_SDP_RECEIVED","data","canProceed","errors","generateErrorPayload","MEDIA_ENGINE","HAVE_LOCAL_OFFER","STABLE","OFFER","setRemoteDescription","window","RTCSessionDescription","type","then","catch","reject","MediaError","createOffer","description","setLocalDescription","LOCAL_SDP_GENERATED","close","rollBackLocalDescription","ROLLBACK","updatePeerConnection","params","createAnswer","peerconnection","HAVE_REMOTE_OFFER","sdpConstraints","answer","connectionState","PEER_CONNECTION_STATE","CLOSED"],"mappings":"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","file":"index.js","sourcesContent":["/* eslint-disable */\n// We need to figure out how to pass a webex logger instance to these util files\n\n/* globals window, RTCSessionDescription */\n\nimport bowser from 'bowser';\nimport sdpTransform from 'sdp-transform'; // https://github.com/clux/sdp-transform\n\nimport Metrics from '../metrics';\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport StaticConfig from '../common/config';\nimport {\n  RETRY_TIMEOUT,\n  ICE_TIMEOUT,\n  AUDIO,\n  SDP,\n  MEDIA_PEER_CONNECTION_NAME,\n  ICE_STATE,\n  ICE_FAIL_TIMEOUT,\n  PEER_CONNECTION_STATE,\n  OFFER,\n  QUALITY_LEVELS,\n  MAX_FRAMESIZES\n} from '../constants';\n\nimport {error, eventType} from '../metrics/config'\n\nimport MediaError from '../common/errors/media';\nimport ParameterError from '../common/errors/parameter';\n\n/**\n * @export\n * @public\n */\nconst pc = {};\n\n/**\n * munges the bandwidth limit into the sdp\n * @param {String} sdpLines\n * @param {Number} index\n * @returns {String}\n */\nconst insertBandwidthLimit = (sdpLines, index) => {\n  // eslint-disable-next-line no-warning-comments\n  // TODO convert to sdp parser\n  let limit;\n  if (sdpLines[index].search(AUDIO) !== -1) {\n    limit = StaticConfig.meetings.bandwidth.audio;\n  } else {\n    limit = StaticConfig.meetings.bandwidth.video;\n  }\n  sdpLines.splice(index + 1, 0, `${SDP.B_LINE}:${limit}`);\n  return sdpLines;\n};\n\n/**\n * needed for calliope max-fs\n * @param {String} sdp\n * @param {String} [level=QUALITY_LEVELS.HIGH] quality level for max-fs\n * @returns {String}\n */\nconst setMaxFs = (sdp, level = QUALITY_LEVELS.HIGH) => {\n  if (!MAX_FRAMESIZES[level]) {\n    throw new ParameterError(`setMaxFs: unable to set max framesize, value for level \"${level}\" is not defined`)\n  }\n  // eslint-disable-next-line no-warning-comments\n  // TODO convert with sdp parser, no munging\n  let replaceSdp = sdp;\n  const maxFsLine = `${SDP.MAX_FS}${MAX_FRAMESIZES[level]}`\n  replaceSdp = replaceSdp.replace(/(\\na=fmtp:(\\d+).*level-asymmetry-allowed=1.*)/gi, `$1;${maxFsLine}`)\n  return replaceSdp;\n};\n\n/**\n * checks that sdp has h264 codec in it\n * @param {String} sdp\n * @returns {boolean}\n */\nconst checkH264Support = (sdp) => {\n  // eslint-disable-next-line no-warning-comments\n  // TODO convert to sdp parser to read rtp.codec\n  const videoPresent = sdp.match(/\\nm=video.*/g);\n  const h264Present = sdp.match(/\\na=rtpmap:\\d+\\sH264.*/g);\n  if (videoPresent) {\n    return !!h264Present;\n  }\n  return true;\n};\n\n/**\n * validates the sdp, checks port, candidates, and ice info\n * @param {String} sdp\n * @returns {Boolean}\n */\nconst validateSdp = (sdp) => {\n  const parsedSdp = sdpTransform.parse(sdp);\n  parsedSdp.media.forEach((mediaLine) => {\n    if (mediaLine.candidates && mediaLine.candidates.length === 0) {\n      LoggerProxy.logger.error('PeerConnectionManager->validateSdp#iceCandidate: Ice candadate never completed');\n      return false;\n    }\n    if (SDP.BAD_MEDIA_PORTS.includes(mediaLine.port)) {\n      LoggerProxy.logger.error('PeerConnectionManager->validateSdp#iceCandidate: Found invalid port number for the ice candidate');\n      return false;\n    }\n    if (!mediaLine.icePwd || !mediaLine.iceUfrag) {\n      LoggerProxy.logger.error('PeerConnectionManager->validateSdp#iceCandidate: ice ufrag and password not found');\n      return false;\n    }\n    return true;\n  });\n};\n\n/**\n * munges the bandwidth into the sdp\n * @param {String} sdp\n * @returns {String}\n */\nconst limitBandwidth = (sdp) => {\n  // TODO convert to sdp parser\n  let offerSdp = sdp;\n  let sdpLines = offerSdp.split(SDP.CARRIAGE_RETURN);\n\n  for (let i = 0; i < sdpLines.length; i += 1) {\n    if (sdpLines[i].search(SDP.M_LINE) !== -1) {\n      sdpLines = insertBandwidthLimit(sdpLines, i);\n    }\n  }\n  offerSdp = sdpLines.join(SDP.CARRIAGE_RETURN);\n  return offerSdp;\n};\n\n/**\n * sets up a listener for ice fails mid meeting\n * @param {RTCPeerConnection} peerConnection\n * @param {Function} fn\n * @param {Function} name - the name for logging, on the transceiver\n * @returns {undefined}\n */\npc.iceFailListener = (peerConnection, fn, name) => {\n  if (!peerConnection) {\n    return;\n  }\n  peerConnection.oniceconnectionstatechange = () => {\n    switch (peerConnection.iceConnectionState) {\n      case ICE_STATE.FAILED:\n      case ICE_STATE.DISCONNECTED:\n        LoggerProxy.logger.warn(`PeerConnectionManager->oniceconnectionstatechange#${name} Interactive Connectivity Establishment(ICE)${peerConnection.iceConnectionState} at ${new Date()}`);\n        setTimeout(() => {\n          switch (peerConnection.iceConnectionState) {\n            case ICE_STATE.FAILED:\n            case ICE_STATE.DISCONNECTED:\n              // if ice is still failed after some time, do the reconnect\n              // else the browser resolves the ice failure on its own\n              fn();\n              break;\n            default:\n            break;\n          }\n        }, ICE_FAIL_TIMEOUT);\n        break;\n      default:\n        break;\n    }\n  };\n};\n\n/**\n * waits for failures and calls the reconnect function on failures\n * @param {RTCPeerConnection} peerConnection\n * @param {Function} [reconnectFn] - if not included, just prints a log\n * @returns {undefined}\n */\npc.detectFailures = (peerConnection, reconnectFn = () => {LoggerProxy.logger.error('PeerConnectionManager->reconnectFn#Ice failed, no function to reconnect with.')}) => {\n  peerConnection.iceFailListener(peerConnection, reconnectFn, MEDIA_PEER_CONNECTION_NAME);\n};\n\n/**\n * makes sure the screen pc sdp has content:slides for server\n * @param {RTCPeerConnection} screenPC\n * @returns {RTCPeerConnection}\n */\npc.setContentSlides = (screenPc) => {\n  if (screenPc && screenPc.sdp) {\n    screenPc.sdp += `${SDP.A_CONTENT_SLIDES}${SDP.CARRIAGE_RETURN}`;\n  }\n  return screenPc;\n};\n\n/**\n * handles ice trickling and establishes ICE connection onto peer connection object\n * @param {Object} peerConnection\n * @param {Object} options\n * @param {String} options.remoteQualityLevel\n * @returns {RTCPeerConnection}\n */\npc.iceCandidate = (peerConnection, {remoteQualityLevel}) =>\n  new Promise((resolve) => {\n    // TODO: we dont need timeout as we can check the api state and validate.\n    const timeout = setTimeout(() => {\n      peerConnection.sdp = limitBandwidth(peerConnection.localDescription.sdp);\n      peerConnection.sdp = setMaxFs(peerConnection.sdp, remoteQualityLevel);\n      peerConnection.sdp = peerConnection.sdp.replace(/\\na=extmap.*/g, '');\n\n      if (!validateSdp(peerConnection.sdp)) {\n        setTimeout(() => {\n          resolve(peerConnection);\n        }, RETRY_TIMEOUT);\n      } else {\n        resolve(peerConnection);\n      }\n    }, ICE_TIMEOUT);\n\n    peerConnection.onicecandidate = (evt) => {\n      if (!evt.candidate && !peerConnection.sdp) {\n        peerConnection.sdp = limitBandwidth(peerConnection.localDescription.sdp);\n        peerConnection.sdp = setMaxFs(peerConnection.sdp, remoteQualityLevel);\n        peerConnection.sdp = peerConnection.sdp.replace(/\\na=extmap.*/g, '');\n\n        if (evt.candidate === null) {\n          validateSdp(peerConnection.sdp);\n          clearTimeout(timeout);\n          resolve(peerConnection);\n        }\n      }\n    };\n  });\n\n/**\n * swapping tracks\n * @param {Object} peerConnection\n * @param {Object} track\n * @returns {undefined}\n */\npc.replaceTrack = (peerConnection, track) => {\n  try {\n    const senders = peerConnection.getSenders();\n    if (senders.length > 0) {\n      senders.forEach((sender) => {\n        if (sender.track && sender.track.kind === track.kind) {\n          sender.replaceTrack(track);\n        }\n      });\n    }\n  } catch (err) {\n    LoggerProxy.logger.error(`PeerConnectionManager->replaceTrack#Error replacing track, ${err}`);\n  }\n};\n\n/**\n * adding streams to peerConnection\n * @param {Object} peerConnection\n * @param {Object} stream\n * @returns {undefined}\n */\npc.addStream = (peerConnection, stream) => {\n  try {\n    if (stream && !bowser.msedge) {\n      const tracksPresent = peerConnection.getSenders && peerConnection.getSenders().find((sender) => sender.track != null);\n      if (tracksPresent) {\n        stream.getTracks().forEach((track) => {\n          pc.replaceTrack(peerConnection, track);\n        });\n        return;\n      }\n      stream.getTracks().forEach((track) => {\n        peerConnection.addTrack(track, stream);\n      });\n      // // TODO : may come back disable addTracks for chrome they are moving back to addStream\n      // // https://bugs.chromium.org/p/chromium/issues/detail?id=764414\n      // // https://bugs.chromium.org/p/chromium/issues/detail?id=738918#c7\n      //   peerConnection.addStream(stream);\n    } else if (bowser.msedge) {\n      peerConnection.addStream(stream);\n    } else {\n    }\n  } catch (err) {\n    LoggerProxy.logger.error(`peer-connection-manager->addStream#Error adding stream, error: ${error}`);\n  }\n};\n\n/**\n * setting the remote description\n * @param {Object} peerConnection\n * @param {String} typeStr\n * @param {String} remoteSdp\n * @param {String} meetingId\n * @returns {undefined}\n */\npc.setRemoteSessionDetails = (peerConnection, typeStr, remoteSdp, meetingId) => {\n  LoggerProxy.logger.log(`PeerConnectionManager->setRemoteSessionDetails#Setting the remote description type: ${typeStr}State: ${peerConnection.signalingState}`);\n  let sdp = remoteSdp;\n\n  sdp = sdp.replace(/\\na=extmap.*/g, '');\n\n  // making sure that the remoteDescription is only set when there is a answer for offer\n  // or there is a offer from the server\n\n  if(!sdp) {\n    Metrics.postEvent({\n      event: eventType.REMOTE_SDP_RECEIVED,\n      meetingId: meetingId, data: {\n      canProceed: false,\n      errors: [Metrics.generateErrorPayload(2001, true,\n        error.name.MEDIA_ENGINE, 'missing remoteSdp')]\n    }})\n  }\n  if (peerConnection.signalingState === SDP.HAVE_LOCAL_OFFER || (peerConnection.signalingState === SDP.STABLE && typeStr === SDP.OFFER)) {\n    return peerConnection.setRemoteDescription(\n        new window.RTCSessionDescription({\n          type: typeStr,\n          sdp\n        })\n      )\n      .then(() => Metrics.postEvent({\n        event: eventType.REMOTE_SDP_RECEIVED,\n        meetingId: meetingId}))\n      .catch((error) => Metrics.postEvent({\n        event: eventType.REMOTE_SDP_RECEIVED,\n        meetingId: meetingId,\n        data: {\n          canProceed: false,\n          errors: [Metrics.generateErrorPayload(2001, true,\n          error.name.MEDIA_ENGINE, 'missing remoteSdp')]\n      }}))\n  }\n\n    return Promise.reject(new MediaError('PeerConnection in wrong state'));\n};\n\n/**\n * create offer with a valid paramater\n * @param {Object} params\n * @param {Object} meetingProperties\n * @param {string} meetingProperties.meetingId\n * @param {string} meetingProperties.remoteQualityLevel LOW|MEDIUM|HIGH\n * @returns {RTCPeerConnection}\n */\npc.createOffer = (peerConnection, {meetingId, remoteQualityLevel}) => {\n  LoggerProxy.logger.log('PeerConnectionManager->createOffer#createOffer: creating a new offer');\n\n  try {\n    return peerConnection\n      .createOffer()\n      .then((description) => {\n        // bug https://bugs.chromium.org/p/chromium/issues/detail?id=1020642\n        // chrome currently generates RTX line irrespective of weither the server side supports it\n        // we are removing apt as well because its associated with rtx line\n\n        description.sdp = description.sdp.replace(/\\r\\na=rtpmap:\\d+ rtx\\/\\d+/g, '');\n        description.sdp = description.sdp.replace(/\\r\\na=fmtp:\\d+ apt=\\d+/g, '');\n        peerConnection.setLocalDescription(description)\n      })\n      .then(() => pc.iceCandidate(peerConnection, {remoteQualityLevel}))\n      .then(() => {\n        peerConnection.sdp = limitBandwidth(peerConnection.localDescription.sdp);\n        peerConnection.sdp = setMaxFs(peerConnection.sdp, remoteQualityLevel);\n        if (!checkH264Support(peerConnection.sdp)) {\n          throw new MediaError('openH264 is downloading please Wait. Upload logs if not working on second try');\n        }\n        peerConnection.sdp = peerConnection.sdp.replace(/\\na=extmap.*/g, '');\n        pc.setContentSlides(peerConnection);\n\n        Metrics.postEvent({\n          event: eventType.LOCAL_SDP_GENERATED,\n          meetingId\n        });\n        return peerConnection;\n      })\n      .catch((err) => {\n        Metrics.postEvent({\n          event: eventType.LOCAL_SDP_GENERATED,\n          meetingId,\n          data: {\n            canProceed: false,\n             errors: [\n               Metrics.generateErrorPayload(2001, true,\n              error.name.MEDIA_ENGINE)]\n        }});\n        pc.close(peerConnection);\n        throw err;\n      });\n  } catch (err) {\n    throw err;\n  }\n};\n\n/**\n * rollBack local description in peerconnection\n * @param {Object} peerConnection\n * @returns {RTCPeerConnection}\n */\npc.rollBackLocalDescription = (peerConnection) => {\n  return peerConnection\n    .setLocalDescription(new RTCSessionDescription({type: SDP.ROLLBACK}))\n    .then(() => peerConnection)\n    .catch((err) => {\n      return Promise.error(err);\n    });\n};\n\n/**\n * @param {Object} params {\n * @param {Boolean} params.offerToReceiveAudio\n * @param {Boolean} params.offerToReceiveVideo\n * @param {string} params.offerSdp\n * @param {MediaStream} params.stream\n * @param {Object} meetingProperties\n * @param {string} meetingProperties.meetingId\n * @param {string} meetingProperties.remoteQualityLevel LOW|MEDIUM|HIGH\n * @returns {Promise.<Array>} [MediaSDP, ScreenSDP]\n */\npc.updatePeerConnection = (params, {meetingId, remoteQualityLevel}) => {\n  LoggerProxy.logger.log(`PeerConnectionManager->updatePeerConnection#updating the peerConnection with params: ${params}`);\n\n  const {peerConnection, offerSdp} = params;\n\n  return pc.createAnswer({\n    peerConnection,\n      offerSdp: offerSdp[0]\n    }, {meetingId, remoteQualityLevel}).then((peerconnection) => {\n      // The content slides should also be set when we are sending inactive\n      pc.setContentSlides(peerconnection);\n    return Promise.resolve([peerconnection.sdp]);\n  });\n};\n\n/**\n * @param {Object} params\n * @param {Object} params.peerConnection\n * @param {Object} params.sdpConstraints\n * @param {Object} meetingProperties\n * @param {string} meetingProperties.meetingId\n * @param {string} meetingProperties.remoteQualityLevel LOW|MEDIUM|HIGH\n * @returns {RTCPeerConnection} peerConnection\n */\npc.createAnswer = (params, {meetingId, remoteQualityLevel}) => {\n  const {peerConnection} = params;\n\n  // TODO: Some times to many mercury event comes at the same time\n  // Need to maintain state of peerconnection\n  if (peerConnection.signalingState === SDP.HAVE_REMOTE_OFFER) {\n    return Promise.resolve(peerConnection);\n  }\n\n  return pc.setRemoteSessionDetails(peerConnection, OFFER, params.offerSdp, meetingId)\n    .then(() => peerConnection.createAnswer(params.sdpConstraints))\n    .then((answer) =>\n      //   if (edonusHack()) {\n      //     answer.sdp = answer.sdp.replace(/recvonly.*/g, 'sendrecv');\n      //   }\n      peerConnection.setLocalDescription(answer)\n    )\n    .then(() => pc.iceCandidate(peerConnection, {remoteQualityLevel}))\n    .then(() => {\n      peerConnection.sdp = limitBandwidth(peerConnection.localDescription.sdp);\n      peerConnection.sdp = setMaxFs(peerConnection.sdp, remoteQualityLevel);\n      if (!checkH264Support(peerConnection.sdp)) {\n        throw new MediaError('openH264 is downloading please Wait. Upload logs if not working on second try');\n      }\n\n      peerConnection.sdp = peerConnection.sdp.replace(/\\na=extmap.*/g, '');\n\n      return peerConnection;\n    })\n    .catch((err) => {\n      LoggerProxy.logger.error(`peer-connection-manager->setRemoteSessionDetails#Error creating remote session, error: ${error}`);\n    });\n};\n\n/**\n * shut down the peer connection\n * @param {Object} peerConnection\n * @returns {undefined}\n */\npc.close = (peerConnection) => {\n  // peerConnection.close() fails on firefox on network changes and gives a Dom exception\n  // To avoid this we have added a try catch block.\n  // Please refer to https://bugzilla.mozilla.org/show_bug.cgi?id=1274407 for more information\n\n  if(peerConnection && peerConnection.connectionState === PEER_CONNECTION_STATE.CLOSED) {\n    return Promise.resolve();\n  }\n  LoggerProxy.logger.log('PeerConnectionManager->close#pc: close() -> closing the mediaPeerConnection');\n  return Promise.resolve()\n    .then(() => {\n      if (peerConnection && peerConnection.close) {\n        peerConnection.close();\n      }\n    });\n};\n\nexport default pc;\n"]}