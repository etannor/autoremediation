{"version":3,"file":"testing.js","sourceRoot":"","sources":["../../src/utils/testing.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,+BAAgD;AAChD,qCAAqD;AAGrD,6CAA6C;AAC7C,MAAM,eAAe,GAAgB;IACnC,MAAM,EAAE,SAAS;CAClB,CAAA;AAED,8DAA8D;AAC9D,oBAA4B,IAAiB;IAC3C,MAAM,CAAC,UAAI,CAAC,sBAAsB,EAAE,IAAI,EAAE,IAAI,EAAE,iBAAiB,CAAC,CAAA;AACpE,CAAC;AAFD,gCAEC;AAED,6EAA6E;AAC7E,sBAAoC,OAAY;;QAC9C,MAAM,IAAI,GAAgB,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,eAAe,EAAE,OAAO,CAAC,CAAA;QACrE,MAAM,WAAK,CAAC,EAAE,QAAQ,EAAE,iBAAQ,CAAC,QAAQ,EAAE,QAAQ,EAAE,iBAAQ,CAAC,QAAQ,EAAE,CAAC,CAAA;QACzE,MAAM,MAAM,GAAG,MAAM,UAAI,CAAC,0BAA0B,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;QACjE,MAAM,YAAM,EAAE,CAAA;QACd,MAAM,CAAC,MAAM,CAAA;IACf,CAAC;CAAA;AAND,oCAMC;AAED,yCAAyC;AACzC,wBAAsC,OAA0B;;QAC9D,MAAM,WAAK,CAAC,EAAE,QAAQ,EAAE,iBAAQ,CAAC,QAAQ,EAAE,QAAQ,EAAE,iBAAQ,CAAC,QAAQ,EAAE,CAAC,CAAA;QACzE,MAAM,MAAM,GAAG,MAAM,UAAI,CAAC,qBAAqB,EAAE,OAAO,EAAE,IAAI,CAAC,CAAA;QAC/D,MAAM,YAAM,EAAE,CAAA;QACd,MAAM,CAAC,MAAM,CAAA;IACf,CAAC;CAAA;AALD,wCAKC;AAED,yDAAyD;AACzD;;QACE,MAAM,WAAK,CAAC,EAAE,QAAQ,EAAE,iBAAQ,CAAC,QAAQ,EAAE,QAAQ,EAAE,iBAAQ,CAAC,QAAQ,EAAE,CAAC,CAAA;QACzE,MAAM,MAAM,GAAG,MAAM,UAAI,CAAC,mBAAmB,EAAE,EAAE,QAAQ,EAAE,gBAAO,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,CAAA;QACpF,MAAM,YAAM,EAAE,CAAA;QACd,MAAM,CAAC,MAAM,CAAA;IACf,CAAC;CAAA;AALD,kDAKC;AAED,uEAAuE;AACvE,qBAAmC,OAA+C;;QAChF,MAAM,WAAK,CAAC,gBAAO,CAAC,CAAA;QACpB,IAAI,KAAK,GAAG,GAAG,CAAA;QACf,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC;YAAC,KAAK,IAAI,UAAU,OAAO,CAAC,MAAM,EAAE,CAAA;QACvD,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC;YAAC,KAAK,IAAI,YAAY,OAAO,CAAC,QAAQ,EAAE,CAAA;QAClE,IAAI;YAAC,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAA;QAC7E,MAAM,MAAM,GAAG,MAAM,SAAG,CAAC,oBAAoB,GAAG,KAAK,EAAE,IAAI,CAAC,CAAA;QAC5D,MAAM,YAAM,EAAE,CAAA;QACd,MAAM,CAAC,MAAM,CAAA;IACf,CAAC;CAAA;AATD,kCASC;AAED,4EAA4E;AAC5E;;QACE,MAAM,WAAK,CAAC,gBAAO,CAAC,CAAA;QACpB,MAAM,UAAU,CAAC,gBAAO,CAAC,CAAA,CAAE,sBAAsB;QACjD,MAAM,UAAU,CAAC,iBAAQ,CAAC,CAAA,CAAC,wBAAwB;QACnD,MAAM,YAAM,EAAE,CAAA;IAChB,CAAC;CAAA;AALD,sBAKC","sourcesContent":["import { get, post, login, logout } from './api'\nimport { apiUser, botUser, mockUser } from './config'\nimport { IMessageAPI, IMessageUpdateAPI, IMessageResultAPI, INewUserAPI, IUserResultAPI, IRoomResultAPI } from './interfaces'\n\n/** Define common attributes for DRY tests */\nconst messageDefaults: IMessageAPI = {\n  roomId: 'GENERAL'\n}\n\n/** Create a user and catch the error if they exist already */\nexport function createUser (user: INewUserAPI): Promise<IUserResultAPI | undefined> {\n  return post('/api/v1/users.create', user, true, /already in use/i)\n}\n\n/** Send message from mock user to channel for tests to listen and respond */\nexport async function sendFromUser (payload: any): Promise<IMessageResultAPI | undefined> {\n  const data: IMessageAPI = Object.assign({}, messageDefaults, payload)\n  await login({ username: mockUser.username, password: mockUser.password })\n  const result = await post('/api/v1/chat.postMessage', data, true)\n  await logout()\n  return result\n}\n\n/** Update message sent from mock user */\nexport async function updateFromUser (payload: IMessageUpdateAPI): Promise<IMessageResultAPI | undefined> {\n  await login({ username: mockUser.username, password: mockUser.password })\n  const result = await post('/api/v1/chat.update', payload, true)\n  await logout()\n  return result\n}\n\n/** Create a direct message session with the mock user */\nexport async function setupDirectFromUser (): Promise<IRoomResultAPI | undefined> {\n  await login({ username: mockUser.username, password: mockUser.password })\n  const result = await post('/api/v1/im.create', { username: botUser.username }, true)\n  await logout()\n  return result\n}\n\n/** Get user data, to check if they're online or have attributes set */\nexport async function getUserData (payload: { userId?: string, username?: string }): Promise<IUserResultAPI | undefined> {\n  await login(apiUser)\n  let param = '?'\n  if (payload.userId) param += `userId=${payload.userId}`\n  else if (payload.username) param += `username=${payload.username}`\n  else throw new Error('User data endpoint requires either userId or username')\n  const result = await get('/api/v1/users.info' + param, true)\n  await logout()\n  return result\n}\n\n/** Initialise testing instance with the required users for SDK/bot tests */\nexport async function setup () {\n  await login(apiUser)\n  await createUser(botUser)  // Create user for bot\n  await createUser(mockUser) // Create mock user user\n  await logout()\n}\n"]}