{"version":3,"file":"driver.js","sourceRoot":"","sources":["../../src/lib/driver.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events'\nimport Asteroid from 'asteroid'\n// Asteroid v2 imports\n/*\nimport { createClass } from 'asteroid'\nimport WebSocket from 'ws'\nimport { Map } from 'immutable'\nimport immutableCollectionMixin from 'asteroid-immutable-collections-mixin'\n*/\nimport * as methodCache from './methodCache'\nimport { Message } from './message'\nimport { IConnectOptions, IRespondOptions, ICallback, ILogger } from '../config/driverInterfaces'\nimport { IAsteroid, ICredentials, ISubscription, ICollection } from '../config/asteroidInterfaces'\nimport { IMessage } from '../config/messageInterfaces'\nimport { logger, replaceLog } from './log'\n\n/** Collection names */\nconst _messageCollectionName = 'stream-room-messages'\nconst _messageStreamName = '__my_messages__'\n\n/**\n * Asteroid ^v2 interface below, suspended for work on future branch\n * @todo Upgrade to Asteroid v2 or find a better maintained ddp client\n */\n/*\nconst Asteroid: IAsteroid = createClass([immutableCollectionMixin])\n*/\n\n// CONNECTION SETUP AND CONFIGURE\n// -----------------------------------------------------------------------------\n\n/**\n * Define default config as public, allowing overrides from new connection.\n * Enable SSL by default if Rocket.Chat URL contains https.\n */\nexport function connectDefaults (): IConnectOptions {\n  return {\n    host: process.env.ROCKETCHAT_URL || 'localhost:3000',\n    useSsl: ((process.env.ROCKETCHAT_URL || '').toString().startsWith('https')),\n    timeout: 20 * 1000 // 20 seconds\n  }\n}\n\n/** Define default config for message respond filters. */\nexport function respondDefaults (): IRespondOptions {\n  return {\n    allPublic: (process.env.LISTEN_ON_ALL_PUBLIC || 'false').toLowerCase() === 'true',\n    dm: (process.env.RESPOND_TO_DM || 'false').toLowerCase() === 'true',\n    livechat: (process.env.RESPOND_TO_LIVECHAT || 'false').toLowerCase() === 'true',\n    edited: (process.env.RESPOND_TO_EDITED || 'false').toLowerCase() === 'true'\n  }\n}\n\n/** Internal for comparing message update timestamps */\nexport let lastReadTime: Date\n\n/**\n * The integration property is applied as an ID on sent messages `bot.i` param\n * Should be replaced when connection is invoked by a package using the SDK\n * e.g. The Hubot adapter would pass its integration ID with credentials, like:\n */\nexport const integrationId = process.env.INTEGRATION_ID || 'js.SDK'\n\n/**\n * Event Emitter for listening to connection.\n * @example\n *  import { driver } from '@rocket.chat/sdk'\n *  driver.connect()\n *  driver.events.on('connected', () => console.log('driver connected'))\n */\nexport const events = new EventEmitter()\n\n/**\n * An Asteroid instance for interacting with Rocket.Chat.\n * Variable not initialised until `connect` called.\n */\nexport let asteroid: IAsteroid\n\n/**\n * Asteroid subscriptions, exported for direct polling by adapters\n * Variable not initialised until `prepMeteorSubscriptions` called.\n */\nexport let subscriptions: ISubscription[] = []\n\n/**\n * Current user object populated from resolved login\n */\nexport let userId: string\n\n/**\n * Array of messages received from reactive collection\n */\nexport let messages: ICollection\n\n/**\n * Allow override of default logging with adapter's log instance\n */\nexport function useLog (externalLog: ILogger) {\n  replaceLog(externalLog)\n}\n\n/**\n * Initialise asteroid instance with given options or defaults.\n * Returns promise, resolved with Asteroid instance. Callback follows\n * error-first-pattern. Error returned or promise rejected on timeout.\n * Removes http/s protocol to get connection hostname if taken from URL.\n * @example <caption>Use with callback</caption>\n *  import { driver } from '@rocket.chat/sdk'\n *  driver.connect({}, (err) => {\n *    if (err) throw err\n *    else console.log('connected')\n *  })\n * @example <caption>Using promise</caption>\n *  import { driver } from '@rocket.chat/sdk'\n *  driver.connect()\n *    .then(() => console.log('connected'))\n *    .catch((err) => console.error(err))\n */\nexport function connect (options: IConnectOptions = {}, callback?: ICallback): Promise<IAsteroid> {\n  return new Promise((resolve, reject) => {\n    const config = Object.assign({}, connectDefaults(), options) // override defaults\n    config.host = config.host!.replace(/(^\\w+:|^)\\/\\//, '')\n    logger.info('[connect] Connecting', config)\n    asteroid = new Asteroid(config.host, config.useSsl)\n    // Asteroid ^v2 interface...\n    /*\n    asteroid = new Asteroid({\n      endpoint: `ws://${options.host}/websocket`,\n      SocketConstructor: WebSocket\n    })\n    */\n    setupMethodCache(asteroid) // init instance for later caching method calls\n    asteroid.on('connected', () => events.emit('connected'))\n    asteroid.on('reconnected', () => events.emit('reconnected'))\n    // let cancelled = false\n    const rejectionTimeout = setTimeout(function () {\n      logger.info(`[connect] Timeout (${config.timeout})`)\n      // cancelled = true\n      const err = new Error('Asteroid connection timeout')\n      callback ? callback(err, asteroid) : reject(err)\n    }, config.timeout)\n    events.once('connected', () => {\n      logger.info('[connect] Connected')\n      // if (cancelled) return asteroid.ddp.disconnect() // cancel if already rejected\n      clearTimeout(rejectionTimeout)\n      if (callback) callback(null, asteroid)\n      resolve(asteroid)\n    })\n  })\n}\n\n/**\n * Remove all active subscriptions, logout and disconnect from Rocket.Chat\n */\nexport function disconnect (): Promise<void> {\n  logger.info('Unsubscribing, logging out, disconnecting')\n  unsubscribeAll()\n  return logout().then(() => Promise.resolve()) // asteroid.disconnect()) // v2 only\n}\n\n// ASYNC AND CACHE METHOD UTILS\n// -----------------------------------------------------------------------------\n\n/**\n * Setup method cache configs from env or defaults, before they are called.\n * @param asteroid The asteroid instance to cache method calls\n */\nfunction setupMethodCache (asteroid: IAsteroid): void {\n  methodCache.use(asteroid)\n  methodCache.create('getRoomIdByNameOrId', {\n    max: parseInt(process.env.ROOM_CACHE_SIZE || '10', 10),\n    maxAge: 1000 * parseInt(process.env.ROOM_CACHE_MAX_AGE || '300', 10)\n  }),\n  methodCache.create('getRoomNameById', {\n    max: parseInt(process.env.ROOM_CACHE_SIZE || '10', 10),\n    maxAge: 1000 * parseInt(process.env.ROOM_CACHE_MAX_AGE || '300', 10)\n  })\n  methodCache.create('createDirectMessage', {\n    max: parseInt(process.env.DM_ROOM_CACHE_SIZE || '10', 10),\n    maxAge: 1000 * parseInt(process.env.DM_ROOM_CACHE_MAX_AGE || '100', 10)\n  })\n}\n\n/**\n * Wraps method calls to ensure they return a Promise with caught exceptions.\n * @param method The Rocket.Chat server method, to call through Asteroid\n * @param params Single or array of parameters of the method to call\n */\nexport function asyncCall (method: string, params: any | any[]): Promise<any> {\n  if (!Array.isArray(params)) params = [params] // cast to array for apply\n  logger.info(`[${method}] Calling (async): ${JSON.stringify(params)}`)\n  return Promise.resolve(asteroid.apply(method, params).result)\n    .catch((err: Error) => {\n      logger.error(`[${method}] Error:`, err)\n      throw err // throw after log to stop async chain\n    })\n    .then((result: any) => {\n      (result)\n        ? logger.debug(`[${method}] Success: ${JSON.stringify(result)}`)\n        : logger.debug(`[${method}] Success`)\n      return result\n    })\n}\n\n/**\n * Call a method as async via Asteroid, or through cache if one is created.\n * @param name The Rocket.Chat server method to call\n * @param params Single or array of parameters of the method to call\n */\nexport function callMethod (name: string, params: any | any[]): Promise<any> {\n  return (methodCache.has(name))\n    ? asyncCall(name, params)\n    : cacheCall(name, params)\n}\n\n/**\n * Wraps Asteroid method calls, passed through method cache if cache is valid.\n * @param method The Rocket.Chat server method, to call through Asteroid\n * @param key Single string parameters only, required to use as cache key\n */\nexport function cacheCall (method: string, key: string): Promise<any> {\n  return methodCache.call(method, key)\n    .catch((err: Error) => {\n      logger.error(`[${method}] Error:`, err)\n      throw err // throw after log to stop async chain\n    })\n    .then((result: any) => {\n      (result)\n        ? logger.debug(`[${method}] Success: ${JSON.stringify(result)}`)\n        : logger.debug(`[${method}] Success`)\n      return result\n    })\n}\n\n// LOGIN AND SUBSCRIBE TO ROOMS\n// -----------------------------------------------------------------------------\n\n/** Login to Rocket.Chat via Asteroid */\nexport function login (credentials: ICredentials): Promise<any> {\n  logger.info(`[login] Logging in ${credentials.username || credentials.email}`)\n  let login: Promise<any>\n  if (process.env.ROCKETCHAT_AUTH === 'ldap') {\n    const params = [\n      credentials.username,\n      credentials.password,\n      { ldap: true, ldapOptions: {} }\n    ]\n    login = asteroid.loginWithLDAP(...params)\n  } else {\n    const usernameOrEmail = credentials.username || credentials.email || 'bot'\n    login = asteroid.loginWithPassword(usernameOrEmail, credentials.password)\n  }\n  return login\n    .then((loggedInUserId) => {\n      userId = loggedInUserId\n      return loggedInUserId\n    })\n    .catch((err: Error) => {\n      logger.info('[login] Error:', err)\n      throw err // throw after log to stop async chain\n    })\n}\n\n/** Logout of Rocket.Chat via Asteroid */\nexport function logout (): Promise<void | null> {\n  return asteroid.logout().catch((err: Error) => {\n    logger.error('[Logout] Error:', err)\n    throw err // throw after log to stop async chain\n  })\n}\n\n/**\n * Subscribe to Meteor subscription\n * Resolves with subscription (added to array), with ID property\n * @todo - 3rd param of asteroid.subscribe is deprecated in Rocket.Chat?\n */\nexport function subscribe (topic: string, roomId: string): Promise<ISubscription> {\n  return new Promise((resolve, reject) => {\n    logger.info(`[subscribe] Preparing subscription: ${topic}: ${roomId}`)\n    const subscription = asteroid.subscribe(topic, roomId, true)\n    subscriptions.push(subscription)\n    return subscription.ready.then((id) => {\n      logger.info(`[subscribe] Stream ready: ${id}`)\n      resolve(subscription)\n    })\n    // Asteroid ^v2 interface...\n    /*\n    subscription.on('ready', () => {\n      console.log(`[${topic}] Subscribe ready`)\n      events.emit('subscription-ready', subscription)\n      subscriptions.push(subscription)\n      resolve(subscription)\n    })\n    subscription.on('error', (err: Error) => {\n      console.error(`[${topic}] Subscribe error:`, err)\n      events.emit('subscription-error', roomId, err)\n      reject(err)\n    })\n    */\n  })\n}\n\n/** Unsubscribe from Meteor subscription */\nexport function unsubscribe (subscription: ISubscription): void {\n  const index = subscriptions.indexOf(subscription)\n  if (index === -1) return\n  subscription.stop()\n  // asteroid.unsubscribe(subscription.id) // v2\n  subscriptions.splice(index, 1) // remove from collection\n  logger.info(`[${subscription.id}] Unsubscribed`)\n}\n\n/** Unsubscribe from all subscriptions in collection */\nexport function unsubscribeAll (): void {\n  subscriptions.map((s: ISubscription) => unsubscribe(s))\n}\n\n/**\n * Begin subscription to room events for user.\n * Older adapters used an option for this method but it was always the default.\n */\nexport function subscribeToMessages (): Promise<ISubscription> {\n  return subscribe(_messageCollectionName, _messageStreamName)\n    .then((subscription) => {\n      messages = asteroid.getCollection(_messageCollectionName)\n      // v2\n      // messages = asteroid.collections.get(_messageCollectionName) || Map()\n      return subscription\n    })\n}\n\n/**\n * Once a subscription is created, using `subscribeToMessages` this method\n * can be used to attach a callback to changes in the message stream.\n * This can be called directly for custom extensions, but for most usage (e.g.\n * for bots) the respondToMessages is more useful to only receive messages\n * matching configuration.\n *\n * @param callback Function called with every change in subscriptions.\n *  - Uses error-first callback pattern\n *  - Second argument is the changed item\n *  - Third argument is additional attributes, such as `roomType`\n */\nexport function reactToMessages (callback: ICallback): void {\n  logger.info(`[reactive] Listening for change events in collection ${messages.name}`)\n  messages.reactiveQuery({}).on('change', (_id: string) => {\n    const changedMessageQuery = messages.reactiveQuery({ _id })\n    if (changedMessageQuery.result && changedMessageQuery.result.length > 0) {\n      const changedMessage = changedMessageQuery.result[0]\n      if (Array.isArray(changedMessage.args)) {\n        logger.info(`[received] Message in room ${ changedMessage.args[0].rid }`)\n        callback(null, changedMessage.args[0], changedMessage.args[1])\n      } else {\n        logger.debug('[received] Update without message args')\n      }\n    } else {\n      logger.debug('[received] Reactive query at ID ${ _id } without results')\n    }\n  })\n}\n\n/**\n * Proxy for `reactToMessages` with some filtering of messages based on config.\n *\n * @param callback Function called after filters run on subscription events.\n *  - Uses error-first callback pattern\n *  - Second argument is the changed item\n *  - Third argument is additional attributes, such as `roomType`\n * @param options Sets filters for different event/message types.\n */\nexport function respondToMessages (callback: ICallback, options: IRespondOptions = {}): void {\n  const config = Object.assign({}, respondDefaults(), options)\n  lastReadTime = new Date() // init before any message read\n  reactToMessages(async (err, message, meta) => {\n    if (err) {\n      logger.error(`Unable to receive messages ${JSON.stringify(err)}`)\n      callback(err) // bubble errors back to adapter\n    }\n\n    // Ignore bot's own messages\n    if (message.u._id === userId) return\n\n    // Ignore DMs if configured to\n    const isDM = meta.roomType === 'd'\n    if (isDM && !config.dm) return\n\n    // Ignore Livechat if configured to\n    const isLC = meta.roomType === 'l'\n    if (isLC && !config.livechat) return\n\n    // Ignore messages in public rooms not joined by bot if configured to\n    if (!config.allPublic && !isDM && !meta.roomParticipant) return\n\n    // Set current time for comparison to incoming\n    let currentReadTime = new Date(message.ts.$date)\n\n    // Ignore edited messages if configured to\n    // unless it's newer than current read time (hasn't been seen before)\n    // @todo: test this logic, why not just return if edited and not responding\n    if (config.edited && typeof message.editedAt !== 'undefined') {\n      let edited = new Date(message.editedAt.$date)\n      if (edited > currentReadTime) currentReadTime = edited\n    }\n\n    // Ignore messages in stream that aren't new\n    if (currentReadTime <= lastReadTime) return\n\n    // At this point, message has passed checks and can be responded to\n    logger.info(`Message receive callback ID ${message._id} at ${currentReadTime}`)\n    logger.info(`[Incoming] ${message.u.username}: ${(message.file !== undefined) ? message.attachments[0].title : message.msg}`)\n    lastReadTime = currentReadTime\n\n    // Add room name to meta, is useful for some adapters\n    if (!isDM && !isLC) meta.roomName = await getRoomName(message.rid)\n\n    // Processing completed, call callback to respond to message\n    callback(null, message, meta)\n  })\n}\n\n/**\n * Get every new element added to DDP in Asteroid (v2)\n * @todo Resolve this functionality within Rocket.Chat with team\n * @param callback Function to call with element details\n */\n/*\nexport function onAdded (callback: ICallback): void {\n  console.log('Setting up reactive message list...')\n  try {\n    asteroid.ddp.on('added', ({ collection, id, fields }) => {\n      console.log(`Element added to collection ${ collection }`)\n      console.log(id)\n      console.log(fields)\n      callback(null, id)\n    })\n  } catch (err) {\n    callback(err)\n  }\n}\n*/\n\n// PREPARE AND SEND MESSAGES\n// -----------------------------------------------------------------------------\n\n/** Get ID for a room by name (or ID). */\nexport function getRoomId (name: string): Promise<string> {\n  return cacheCall('getRoomIdByNameOrId', name)\n}\n\n/** Get name for a room by ID. */\nexport function getRoomName (id: string): Promise<string> {\n  return cacheCall('getRoomNameById', id)\n}\n\n/**\n * Get ID for a DM room by its recipient's name.\n * Will create a DM (with the bot) if it doesn't exist already.\n * @todo test why create resolves with object instead of simply ID\n */\nexport function getDirectMessageRoomId (username: string): Promise<string> {\n  return cacheCall('createDirectMessage', username).then((DM) => DM.rid)\n}\n\n/** Join the bot into a room by its name or ID */\nexport function joinRoom (room: string): Promise<void> {\n  return getRoomId(room).then((roomId) => asyncCall('joinRoom', roomId))\n}\n\n/** Join a set of rooms by array of names or IDs */\nexport function joinRooms (rooms: string[]): Promise<void[]> {\n  return Promise.all(rooms.map((room) => joinRoom(room)))\n}\n\n/**\n * Structure message content, optionally addressing to room ID.\n * Accepts message text string or a structured message object.\n */\nexport function prepareMessage (content: string | IMessage, roomId?: string): Message {\n  const message = new Message(content, integrationId)\n  if (roomId) message.setRoomId(roomId)\n  return message\n}\n\n/**\n * Send a prepared message object (with pre-defined room ID).\n * Usually prepared and called by sendMessageByRoomId or sendMessageByRoom.\n */\nexport function sendMessage (message: IMessage): Promise<IMessage> {\n  return asyncCall('sendMessage', message)\n}\n\n/**\n * Prepare and send string/s to specified room ID.\n * @param content Accepts message text string or array of strings.\n * @param roomId  ID of the target room to use in send.\n */\nexport function sendToRoomId (content: string | string[], roomId: string): Promise<IMessage[] | IMessage> {\n  if (!Array.isArray(content)) {\n    return sendMessage(prepareMessage(content, roomId))\n  } else {\n    return Promise.all(content.map((text) => {\n      return sendMessage(prepareMessage(text, roomId))\n    }))\n  }\n}\n\n/**\n * Prepare and send string/s to specified room name (or ID).\n * @param content Accepts message text string or array of strings.\n * @param room    A name (or ID) to resolve as ID to use in send.\n */\nexport function sendToRoom (content: string | string[], room: string): Promise<IMessage[] | IMessage> {\n  return getRoomId(room).then((roomId) => sendToRoomId(content, roomId))\n}\n\n/**\n * Prepare and send string/s to a user in a DM.\n * @param content   Accepts message text string or array of strings.\n * @param username  Name to create (or get) DM for room ID to use in send.\n */\nexport function sendDirectToUser (content: string | string[], username: string): Promise<IMessage[] | IMessage> {\n  return getDirectMessageRoomId(username).then((rid) => sendToRoomId(content, rid))\n}\n"]}